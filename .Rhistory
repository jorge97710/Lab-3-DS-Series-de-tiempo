qqline(data$GasSuperior, col = 3)
qplot(data$GasRegular, geom="histogram",main = "Histograma de Gas Regular")
qqnorm(data$GasRegular, main = "Gas Regular", col = 2)
qqline(data$GasRegular, col = 3)
qplot(data$Kerosina, geom="histogram",main = "Histograma de Kerosina")
qqnorm(data$Kerosina, main = "Kerosina", col = 2)
qqline(data$Kerosina, col = 3)
qplot(data$rTurboJet, geom="histogram",main = "Histograma de rTurboJet")
qqnorm(data$rTurboJet, main = "rTurboJet", col = 2)
qqline(data$rTurboJet, col = 3)
qplot(data$Diesel, geom="histogram",main = "Histograma de Diesel")
qqnorm(data$Diesel, main = "Diesel", col = 2)
qqline(data$Diesel, col = 3)
qplot(data$DieselLSl, geom="histogram",main = "Histograma de glp")
qplot(data$DieselLS, geom="histogram",main = "Histograma de glp")
qplot(data$DieselLS, geom="histogram",main = "Histograma de DieselLS")
qqnorm(data$DieselLS, main = "DieselLS", col = 2)
qqline(data$DieselLS, col = 3)
qplot(data$DieselULS, geom="histogram",main = "Histograma de DieselULS")
qqnorm(data$DieselULSl, main = "DieselULS", col = 2)
qqnorm(data$DieselULSl, main = "DieselULS", col = 2)
qqline(data$DieselULSl, col = 3)
qqnorm(data$DieselULS, main = "DieselULS", col = 2)
qqline(data$DieselULS, col = 3)
qplot(data$Bunker, geom="histogram",main = "Histograma de Bunker")
qqnorm(data$Bunker, main = "Bunker", col = 2)
qplot(data$Bunker, geom="histogram",main = "Histograma de Bunker")
qqnorm(data$Bunker, main = "Bunker", col = 2)
qqline(data$Bunker, col = 3)
qplot(data$Asfalto, geom="histogram",main = "Histograma de Asfalto")
qplot(data$PetCoke, geom="histogram",main = "Histograma de PetCoke")
qqnorm(data$Asfalto, main = "Asfalto", col = 2)
qqline(data$Asfalto, col = 3)
qqnorm(data$PetCoke, main = "PetCoke", col = 2)
qqline(data$PetCoke, col = 3)
qplot(data$AceitesLub, geom="histogram",main = "Histograma de AceitesLub")
"
qqnorm(data$AceitesLub, main = "AceitesLub", col = 2)
qqline(data$AceitesLub,col = 3)
qqnorm(data$AceitesLub, main = "AceitesLub", col = 2)
gc()
qqnorm(data$AceitesLub, main = "AceitesLub", col = 2)
qqline(data$AceitesLub,col = 3)
qplot(data$gGrasasLub, geom="histogram",main = "Histograma de glp")
qplot(data$GrasasLub, geom="histogram",main = "Histograma de glp")
qplot(data$GrasasLub, geom="histogram",main = "Histograma de GrasasLub")
qqnorm(data$GrasasLub, main = "GrasasLub", col = 2)
qqline(data$GrasasLub, col = 3)
qplot(data$Solventes, geom="histogram",main = "Histograma de Solventes")
qqnorm(data$Solventes, main = "Solventes", col = 2)
qqline(data$Solventes, col = 3)
qplot(data$Naftas, geom="histogram",main = "Histograma de Naftas")
qplot(data$Naftas, geom="histogram",main = "Histograma de Naftas")
qplot(data$Ceras, geom="histogram",main = "Histograma de glp")
qplot(data$Ceras, geom="histogram",main = "Histograma de Ceras")
a
qqnorm(data$Ceras, main = "Ceras", col = 2)
qqline(data$Ceras, col = 3)
qplot(data$Butano, geom="histogram",main = "Histograma de Butano")
qqnorm(data$Butano, main = "Butano", col = 2)
qqline(data$Butano, col = 3)
qplot(data$PetroleoReconst, geom="histogram",main = "Histograma de PetroleoReconst")
qqnorm(data$PetroleoReconst, main = "PetroleoReconst", col = 2)
qqline(data$PetroleoReconst, col = 3)
qplot(data$MTBE, geom="histogram",main = "Histograma de MTBE")
qqnorm(data$MTBE, main = "MTBE", col = 2)
qqline(data$MTBE, col = 3)
qplot(data$Orimulsion, geom="histogram",main = "Histograma de Orimulsion")
qqnorm(data$Orimulsion, main = "Orimulsion", col = 2)
qqline(data$Orimulsion, col = 3)
qplot(data$MezclasOleosas, geom="histogram",main = "Histograma de MezclasOleosas")
qqnorm(data$MezclasOleosas, main = "MezclasOleosas", col = 2)
qqline(data$MezclasOleosas, col = 3)
qplot(data$Total, geom="histogram",main = "Histograma de Total")
qqnorm(data$Total, main = "Total", col = 2)
qqline(data$Total, col = 3)
library(dplyr)
data$newDiesel<- data %>% mutate(newDiesel = coalesce(Diesel,DieselLS)) %>%
select( newDiesel)
qplot(data$newDiesel, geom="histogram",main = "Histograma de newDiesel")
qplot(data$newDiesel, geom="histogram",main = "Histograma de newDiesel")
data$newDiesel
##------------------------------------------------------------------
#Uniendo diesel y diesel ls
library(dplyr)
##Serie de tiempo para gasolina superior
superior <- ts(data$GasSuperior, start=c(2001, 1), end=c(2019, 6), frequency=12)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(superior)
end(superior)
#Saber la frecuencia de la serie
frequency(superior)
plot(superior)
abline(reg=lm(superior~time(superior)), col=c("red"))
plot(aggregate(superior,FUN=mean))
dec.Sup<-decompose(superior)
plot(dec.Sup)
plot(dec.Sup$seasonal)
install.packages("ggfortify")
library(forecast)
library(tseries)
library(fUnitRoots)
library(ggfortify)
library(forecast)
library(tseries)
library(fUnitRoots)
library(ggfortify)
data("AirPassengers")
class(AirPassengers)
#Saber cuando empieza la serie y cuando termina
start(AirPassengers)
end(AirPassengers)
#Saber la frecuencia de la serie
frequency(AirPassengers)
#Ver el grÃƒÂ¡fico de la serie
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)), col=c("red"))
plot(aggregate(AirPassengers,FUN=mean))
dec.AirPass<-decompose(AirPassengers)
plot(dec.AirPass)
plot(dec.AirPass$seasonal)
#Aplicaremos una transformaciÃƒÂ³n logarÃƒ­tmica
logAirPassengers <- log(AirPassengers)
plot(decompose(logAirPassengers))
plot(dec.AirPass)
#Ver el grÃƒÂ¡fico de la serie
plot(AirPassengers)
#Ver el grÃƒÂ¡fico de la serie
plot(logAirPassengers)
##------------------------------------------------------------------
#Uniendo diesel y diesel ls
library(dplyr)
data$newDiesel<- data %>% mutate(newDiesel = coalesce(Diesel,DieselLS)) %>%
select( newDiesel)
##Serie de tiempo para gasolina diesel
diesel <- ts(data$newDiesel, start=c(2001, 1), end=c(2019, 6), frequency=12)
plot(diesel)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(diesel)
end(diesel)
#Saber la frecuencia de la serie
frequency(diesel)
abline(reg=lm(diesel~time(diesel)), col=c("red"))
plot(aggregate(diesel,FUN=mean))
dec.Dis<-decompose(diesel)
plot(dec.Dis)
plot(dec.Dis$seasonal)
plot(dec.Dis)
#Aplicaremos una transformaciÃƒÂƒÃ‚Â³n logarÃƒÂƒ?tmica
logdis <- log(diesel)
plot(decompose(logdis))
#Ver el grÃƒÂƒÃ‚Â¡fico de la serie
plot(logdis)
#Para saber si hay raÃƒÂƒ?ces unitarias
adfTest(logdis)
#Para saber si hay raÃƒÂƒ?ces unitarias
adfTest(logdis)
#Para saber si hay raÃƒÂƒ?ces unitarias
adfTest(logdis)
#Para saber si hay raÃƒÂƒ?ces unitarias
adfTest(logdis)
#Aplicaremos una transformaciÃƒÂƒÃ‚Â³n logarÃƒÂƒ?tmica
logdis <- log(diesel)
#Para saber si hay raÃƒÂƒ?ces unitarias
adfTest(logdis)
#Para saber si hay raÃƒÂƒ?ces unitarias
adfTest(diesel)
logdis
#Para saber si hay raÃƒÂƒ?ces unitarias
adfTest(logdis)
adfTest(diff(logdis))
##Serie de tiempo para gasolina superior
superior <- ts(data$GasSuperior, start=c(2001, 1), end=c(2019, 6), frequency=12)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(superior)
end(superior)
#Saber la frecuencia de la serie
frequency(superior)
plot(superior)
abline(reg=lm(superior~time(superior)), col=c("red"))
plot(aggregate(superior,FUN=mean))
dec.Sup<-decompose(superior)
plot(dec.Sup)
plot(dec.Sup$seasonal)
#Aplicaremos una transformaciÃƒÂƒÃ‚Â³n logarÃƒÂƒ?tmica
logSup <- log(superior)
plot(decompose(logSup))
plot(dec.Sup)
plot(decompose(logSup))
#Ver el grÃƒÂƒÃ‚Â¡fico de la serie
plot(logSup)
#Para saber si hay raÃƒÂƒ?ces unitarias
adfTest(logSup)
adfTest(diff(logSup))
#GrÃƒÂƒÃ‚Â¡fico de autocorrelaciÃƒÂƒÃ‚Â³n
acf(logSup)
# funciones de autocorrelaciÃƒÂƒÃ‚Â³n y autocorrelaciÃƒÂƒÃ‚Â³n parcial
acf(diff(logSup),12)
# funciones de autocorrelaciÃƒÂƒÃ‚Â³n y autocorrelaciÃƒÂƒÃ‚Â³n parcial
acf(diff(logSup),12)
pacf(diff(logSup))
auto.arima(superior)
auto.arima(AirPassengers)
auto.arima(AirPassengers)
pred <- predict(fit, n.ahead = 10*12)
pred
fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
pred
auto.arima(superior)
data$newDiesel<- data %>% mutate(newDiesel = coalesce(Diesel,DieselLS)) %>%
select( newDiesel)
##Serie de tiempo para gasolina diesel
diesel <- ts(data$newDiesel, start=c(2001, 1), end=c(2019, 6), frequency=12)
plot(diesel)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(diesel)
end(diesel)
#Saber la frecuencia de la serie
frequency(diesel)
plot(diesel)
abline(reg=lm(diesel~time(diesel)), col=c("red"))
plot(aggregate(diesel,FUN=mean))
dec.Dis<-decompose(diesel)
plot(dec.Dis)
plot(dec.Dis$seasonal)
Aplicaremos una transformaciÃƒÂƒÃ‚Â³n logarÃƒÂƒ?tmica
logdis <- log(diesel)
plot(decompose(logdis))
#Ver el grÃƒÂƒÃ‚Â¡fico de la serie
plot(logdis)
#Para saber si hay raÃƒÂƒ?ces unitarias
adfTest(logdis)
adfTest(diff(logdis))
# funciones de autocorrelaciÃƒÂƒÃ‚Â³n y autocorrelaciÃƒÂƒÃ‚Â³n parcial
acf(diff(logdis),12)
pacf(diff(logdis))
auto.arima(diesel)
fit <- arima(log(diesel), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(superior,2.718^pred$pred, log = "y", lty = c(1,3))
fit2 <- arima(log(diesel), c(2, 1, 1),seasonal = list(order = c(0, 1, 0), period = 12))
forecastAP <- forecast(fit2, level = c(95), h = 120)
autoplot(forecastAP)
##Serie de tiempo para gasolina diesel
diesel <- ts(data$newDiesel, start=c(2001, 1), end=c(2019, 6), frequency=12)
plot(diesel)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(diesel)
end(diesel)
#Saber la frecuencia de la serie
frequency(diesel)
plot(diesel)
abline(reg=lm(diesel~time(diesel)), col=c("red"))
plot(aggregate(diesel,FUN=mean))
dec.Dis<-decompose(diesel)
plot(dec.Dis)
plot(dec.Dis$seasonal)
##no presenta estacionalidadÃ‚Â¿? varia practicamente igual siempre.
##si presenta tendencia, va en aumento la importacion
#Aplicaremos una transformaciÃƒÂƒÃ‚Â³n logarÃƒÂƒ?tmica
logdis <- log(diesel)
plot(decompose(logdis))
#Ver el grÃƒÂƒÃ‚Â¡fico de la serie
plot(logdis)
#Para saber si hay raÃƒÂƒ?ces unitarias
adfTest(logdis)
adfTest(diff(logdis))
#GrÃƒÂƒÃ‚Â¡fico de autocorrelaciÃƒÂƒÃ‚Â³n
acf(logdis)
# funciones de autocorrelaciÃƒÂƒÃ‚Â³n y autocorrelaciÃƒÂƒÃ‚Â³n parcial
acf(diff(logdis),12)
pacf(diff(logdis))
# Hacer el modelo
auto.arima(diesel)
fit <- arima(log(diesel), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(superior,2.718^pred$pred, log = "y", lty = c(1,3))
fit2 <- arima(log(diesel), c(2, 1, 1),seasonal = list(order = c(0, 1, 0), period = 12))
forecastAP <- forecast(fit2, level = c(95), h = 120)
autoplot(forecastAP)
coeftest(fit)
library(forecast)
library(tseries)
library(fUnitRoots)
library(ggfortify)
library(ggplot2)
library(forecast)
library(tseries)
library(fUnitRoots)
library(ggfortify)
coeftest(fit)
library(lmtest)
Box.test(resid(fit), lag = 1, type = c("Ljung-Box"), fitdf = 0)
coeftest(fit)
Box.test(resid(fit), lag = 1, type = c("Ljung-Box"), fitdf = 0)
acf(fit$residuals)
Box.test(resid(fit), lag = 1, type = c("Ljung-Box"), fitdf = 0)
#vs 2
data$Diesel <- na.replace(data$Diesel,0)
data$DieselLS <- na.replace(data$DieselLS,0)
data$DieselULS <- na.replace(data$DieselULS,0)
data$Diesel <- data$Diesel+data$DieselLS+data$DieselULS
data <- within(data,rm("DieselLS", "DieselULS"))
descdist(data$Diesel)
years <- table(data$Anio)
seriedetiempo <- ts(data$Diesel, start=c(2001, 1), end=c(2019, 6), frequency=12)
plot(seriedetiempo)
descdist(data$Diesel)
data <- within(data,rm("DieselLS", "DieselULS"))
#vs 2
data$Diesel <- na.replace(data$Diesel,0)
data$DieselLS <- na.replace(data$DieselLS,0)
data$DieselULS <- na.replace(data$DieselULS,0)
data$Diesel <- data$Diesel+data$DieselLS+data$DieselULS
##------------------------------------------------------------------
#Uniendo diesel y diesel ls
library(dplyr)
data$newDiesel<- data %>% mutate(newDiesel = coalesce(Diesel,DieselLS)) %>%
select( newDiesel)
library(forecast)
library(tseries)
library(fUnitRoots)
library(ggfortify)
library(ggplot2)
library(forecast)
library(tseries)
library(fUnitRoots)
library(ggfortify)
data <- read.csv(file="datosimp.csv", header=TRUE)
data$newDiesel<- data %>% mutate(newDiesel = coalesce(Diesel,DieselLS)) %>%
select( newDiesel)
##Serie de tiempo para gasolina diesel
diesel <- ts(data$newDiesel, start=c(2001, 1), end=c(2019, 6), frequency=12)
plot(diesel)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(diesel)
end(diesel)
#Saber la frecuencia de la serie
frequency(diesel)
plot(diesel)
abline(reg=lm(diesel~time(diesel)), col=c("red"))
plot(aggregate(diesel,FUN=mean))
dec.Dis<-decompose(diesel)
plot(dec.Dis)
plot(dec.Dis$seasonal)
#Aplicaremos una transformaciÃƒÂƒÃ‚Â³n logarÃƒÂƒ?tmica
logdis <- log(diesel)
plot(decompose(logdis))
#Ver el grÃƒÂƒÃ‚Â¡fico de la serie
plot(logdis)
#Para saber si hay raÃƒÂƒ?ces unitarias
adfTest(logdis)
adfTest(diff(logdis))
#GrÃƒÂƒÃ‚Â¡fico de autocorrelaciÃƒÂƒÃ‚Â³n
acf(logdis)
# funciones de autocorrelaciÃƒÂƒÃ‚Â³n y autocorrelaciÃƒÂƒÃ‚Â³n parcial
acf(diff(logdis),12)
pacf(diff(logdis))
auto.arima(diesel)
fit <- arima(log(diesel), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(superior,2.718^pred$pred, log = "y", lty = c(1,3))
fit2 <- arima(log(diesel), c(2, 1, 1),seasonal = list(order = c(0, 1, 0), period = 12))
forecastAP <- forecast(fit2, level = c(95), h = 120)
autoplot(forecastAP)
coeftest(fit)
library(lmtest)
Box.test(resid(fit), lag = 1, type = c("Ljung-Box"), fitdf = 0)
acf(fit$residuals)
Box.test(resid(fit), lag = 1, type = c("Ljung-Box"), fitdf = 0)
#vs 2
data$Diesel <- na.replace(data$Diesel,0)
#vs 2
data$Diesel <- na.replace(data$Diesel,0)
library(lmtest)
Box.test(resid(fit), lag = 1, type = c("Ljung-Box"), fitdf = 0)
acf(fit$residuals)
Box.test(resid(fit), lag = 1, type = c("Ljung-Box"), fitdf = 0)
#vs 2
data$Diesel <- na.replace(data$Diesel,0)
data$DieselLS <- na.replace(data$DieselLS,0)
##------------------------------------------------------------------
##Serie de tiempo para gasolina regular
regular <- ts(data$GasRegular, start=c(2001, 1), end=c(2019, 6), frequency=12)
plot(regular)
library('ggplot2')
library('forecast')
library('tseries')
##prueba y limpieza
data$clean_cnt = tsclean(regular)
ggplot() +
geom_line(data = daily_data, aes(x = Date, y = clean_cnt)) + ylab('Cleaned Bicycle Count')
tsclean(regular)
ggplot() +
geom_line(data = daily, aes(x = Date, y = clean_cnt)) + ylab('Cleaned Bicycle Count')
ggplot() +
geom_line(data = data, aes(x = Date, y = clean_cnt)) + ylab('Cleaned Bicycle Count')
##------------------------------------------------------------------
#Uniendo diesel y diesel ls
library(dplyr)
data$newDiesel<- data %>% mutate(newDiesel = coalesce(Diesel,DieselLS)) %>%
select( newDiesel)
##Serie de tiempo para gasolina diesel
diesel <- ts(data$newDiesel, start=c(2001, 1), end=c(2019, 6), frequency=12)
plot(diesel)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(diesel)
end(diesel)
#Saber la frecuencia de la serie
frequency(diesel)
plot(diesel)
abline(reg=lm(diesel~time(diesel)), col=c("red"))
plot(aggregate(diesel,FUN=mean))
dec.Dis<-decompose(diesel)
plot(dec.Dis)
plot(dec.Dis$seasonal)
#Aplicaremos una transformaciÃƒÂƒÃ‚Â³n logarÃƒÂƒ?tmica
logdis <- log(diesel)
plot(decompose(logdis))
#Ver el grÃƒÂƒÃ‚Â¡fico de la serie
plot(logdis)
#Para saber si hay raÃƒÂƒ?ces unitarias
adfTest(logdis)
adfTest(diff(logdis))
#GrÃƒÂƒÃ‚Â¡fico de autocorrelaciÃƒÂƒÃ‚Â³n
acf(logdis)
# funciones de autocorrelaciÃƒÂƒÃ‚Â³n y autocorrelaciÃƒÂƒÃ‚Â³n parcial
acf(diff(logdis),12)
pacf(diff(logdis))
auto.arima(diesel)
fit <- arima(log(diesel), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(superior,2.718^pred$pred, log = "y", lty = c(1,3))
fit2 <- arima(log(diesel), c(2, 1, 1),seasonal = list(order = c(0, 1, 0), period = 12))
forecastAP <- forecast(fit2, level = c(95), h = 120)
autoplot(forecastAP)
coeftest(fit)
library(lmtest)
Box.test(resid(fit), lag = 1, type = c("Ljung-Box"), fitdf = 0)
acf(fit$residuals)
Box.test(resid(fit), lag = 1, type = c("Ljung-Box"), fitdf = 0)
data$Diesel <- na.replace(data$Diesel,0)
data$DieselLS <- na.replace(data$DieselLS,0)
divide into train and validation set
#divide into train and validation set
train = data[:int(0.7*(len(data)))]
#divide into train and validation set
train = data[,int(0.7*(len(data)))]
library(Metrics)
install.packages("Metrics")
# splitting data into train and valid sets
train = data[1:100,]
valid = data[101:nrow(data),]
model = auto.arima(train)
# splitting data into train and valid sets
train = regular[1:100,]
# splitting data into train and valid sets
train = regular[1:100]
valid = regular[101:nrow(data),]
valid = regular[101:nrow(data)]
model = auto.arima(train)
# model summary
summary(model)
# forecasting
forecast = predict(model,44)
# evaluation
rmse(valid$International.airline.passengers, forecast$pred)
forecast
plot(forecast)
##Serie de tiempo para gasolina superior
superior <- ts(data$GasSuperior, start=c(2001, 1), end=c(2019, 6), frequency=12)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(superior)
end(superior)
#Saber la frecuencia de la serie
frequency(superior)
plot(superior)
abline(reg=lm(superior~time(superior)), col=c("red"))
plot(aggregate(superior,FUN=mean))
dec.Sup<-decompose(superior)
plot(dec.Sup)
plot(dec.Sup$seasonal)
#Aplicaremos una transformaciÃƒÂƒÃ‚Â³n logarÃƒÂƒ?tmica
logSup <- log(superior)
plot(decompose(logSup))
#Ver el grÃƒÂƒÃ‚Â¡fico de la serie
plot(logSup)
#Para saber si hay raÃƒÂƒ?ces unitarias
adfTest(logSup)
adfTest(diff(logSup))
#GrÃƒÂƒÃ‚Â¡fico de autocorrelaciÃƒÂƒÃ‚Â³n
acf(logSup)
# funciones de autocorrelaciÃƒÂƒÃ‚Â³n y autocorrelaciÃƒÂƒÃ‚Â³n parcial
acf(diff(logSup),12)
pacf(diff(logSup))
# Hacer el modelo
auto.arima(superior)
fit <- arima(log(superior), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(superior,2.718^pred$pred, log = "y", lty = c(1,3))
fit2 <- arima(log(superior), c(2, 1, 1),seasonal = list(order = c(0, 1, 0), period = 12))
forecastAP <- forecast(fit2, level = c(95), h = 120)
autoplot(forecastAP)
