datatrain = data[ index, ]
datatest = data[ -index, ]
max = apply(data , 2 , max)
min = apply(data, 2 , min)
scaled = as.data.frame(scale(data, center = min, scale = max - min))
# creating training and test set
trainNN = scaled[index , ]
testNN = scaled[-index , ]
# fit neural network
set.seed(2)
NN = neuralnet(clasificiacion ~ MES+Temporada, testNN, hidden = 3 , linear.output = T)
todo <- read.csv("estudioenfermedad.csv")
cor(todo$clasificiacion,todo$Temporada,method="spearman")
plot(todo$Temporada,todo$clasificiacion)
prueba = lm(clasificiacion ~ Temporada, data=todo)
summary(prueba)
gc()
library(data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
library(data.table)
mydat <- fread('http://www.stats.ox.ac.uk/pub/datasets/csb/ch11b.dat')
head(mydat)
mydat <- fread('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
install.packages("curl")
mydat <- fread('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
head(mydat)
library(data.table)
library(RCurl)
install.packages("RCurl")
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/
.csv', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/.csv', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
library(RCurl)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
myfile <- getURL('https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/')
read.table.url("https://www.mineduc.gob.gt/BUSCAESTABLECIMIENTO_GE/",skip=4,header=T)
setwd("C:/Users/jazmi/OneDrive/Documentos/GitHub/Lab-3-DS-Series-de-tiempo")
##setwd("C:/Users/jazmi/OneDrive/Documentos/GitHub/Lab-3-DS-Series-de-tiempo")
data <- read.csv(file="datosimp.csv", header=TRUE)
View(data)
install.packages("ggfortify")
install.packages("forecast")
install.packages("fUnitRoots")
data("AirPassengers")
class(AirPassengers)
class(data)
View(AirPassengers)
ggplot(data = data)+
xlab("Cantidad por aÃ±os")+
geom_bar(mapping = aes(x =Anio))+ theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
ggplot(data = data)+
xlab("Cantidad por aÃ±os")+
geom_bar(mapping = aes(x =Anio))+ theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = data)+
xlab("Cantidad por aÃ±os")+
geom_bar(mapping = aes(x =Mes))+ theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = data)+
xlab("Cantidad por aÃ±os")+
geom_bar(mapping = aes(x =Anio))+ theme(axis.text.x = element_text(angle = 45, hjust = 1))
summary(data)
barplot(table(data$Anio),main = "Cantidad segun aÃ±o")
barplot(table(data$Mes),main = "Cantidad segun mes")
barplot(table(data$Anio),main = "Cantidad segun aÃ±o")
qplot(data$GLP, geom="histogram",main = "Histograma de glp")
qqnorm(data$GLP, main = "GLP", col = 2)
qqline(data$GLP, col = 3)
DATA[0,1]
data[0,1]
data[,1]
data[,-1]
data[,-2]
data[,-1-2]
cuantitativa <- data[,-1]
cuantitativa <- cuantitativa[,-1]
View(cuantitativa)
cor(cuantitativa)
prueba <- na.omit(cuantitativas)
prueba <- na.omit(cuantitativa)
prueba <-   cor(prueba,method  ="pearson");
prueba
cor(prueba,method  ="pearson")
prueba <- na.omit(cuantitativa)
prueba
cuantitativa <- data[,-1]
cuantitativa <- cuantitativa[,-1]
View(cuantitativa)
cor(cuantitativa)
prueba <-   cor(prueba,method  ="pearson")
prueba
cuantitativa <- data[,-1]
cuantitativa <- cuantitativa[,-1]
View(cuantitativa)
cor(cuantitativa)
prueba <- na.omit(cuantitativa)
prueba <-   cor(prueba)
round (prueba, digits=2)
prueba
cuantitativa <- data[,-1]
cuantitativa <- cuantitativa[,-1]
View(cuantitativa)
cor(cuantitativa)
cuantitativa <- data[,-1]
cuantitativa <- cuantitativa[,-1]
cor(cuantitativa)
cor(cuantitativa, method = c("pearson", "kendall", "spearman"))
res <- cor(cuantitativa)
round(res, 2)
cor(cuantitativa, use = "complete.obs")
rcorr(cuantitativa, type = c("pearson","spearman"))
install.packages("Hmisc")
#install.packages("Hmisc")
library("Hmisc")
res2 <- rcorr(as.matrix(cuantitativa))
res2
# Extract the correlation coefficients
res2$r
# Extract p-values
res2$P
# ++++++++++++++++++++++++++++
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
flattenCorrMatrix(res2$r, res2$P)
install.packages("corrplot")
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
library(corrplot)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
corrplot(res, type = "upper",
tl.col = "black", tl.srt = 45)
a
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(cuantitativa, histogram=TRUE, pch=19)
heatmap(x = res, col = col, symm = TRUE)
# Get some colors
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(x = res, col = col, symm = TRUE)
install.packages(c("forecast", "fUnitRoots", "ggfortify", "tseries"))
AirPassengers
myts <- ts(data$GasSuperior, start=c(2001, 1), end=c(2019, 6), frequency=12)
plot(myts)
data$GasSuperior
myts <- ts(data$GasRegular, start=c(2001, 1), end=c(2019, 6), frequency=12)
regular <- ts(data$GasRegular, start=c(2001, 1), end=c(2019, 6), frequency=12)
plot(regular)
diesel <- ts(data$GasSuperior, start=c(2001, 1), end=c(2019, 6), frequency=12)
plot(diesel)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(superior)
##Serie de tiempo para gasolina superior
superior <- ts(data$GasSuperior, start=c(2001, 1), end=c(2019, 6), frequency=12)
plot(superior)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(superior)
end(superior)
#Saber la frecuencia de la serie
frequency(superior)
data("AirPassengers")
class(AirPassengers)
#Saber cuando empieza la serie y cuando termina
start(AirPassengers)
end(AirPassengers)
#Saber la frecuencia de la serie
frequency(AirPassengers)
#Ver el grÃƒÂ¡fico de la serie
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)), col=c("red"))
plot(superior)
abline(reg=lm(superior~time(superior)), col=c("red"))
plot(aggregate(AirPassengers,FUN=mean))
#Ver el grÃƒÂ¡fico de la serie
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)), col=c("red"))
plot(aggregate(AirPassengers,FUN=mean))
dec.AirPass<-decompose(AirPassengers)
plot(dec.AirPass)
plot(dec.AirPass$seasonal)
plot(aggregate(superior,FUN=mean))
dec.Sup<-decompose(superior)
plot(dec.Sup)
plot(dec.Sup$seasonal)
plot(aggregate(AirPassengers,FUN=mean))
dec.AirPass<-decompose(AirPassengers)
plot(dec.AirPass)
plot(dec.AirPass$seasonal)
#Aplicaremos una transformaciÃƒÂ³n logarÃƒ­tmica
logAirPassengers <- log(AirPassengers)
plot(decompose(logAirPassengers))
#Aplicaremos una transformaciÃƒÂ³n logarÃƒ­tmica
logSup <- log(superior)
plot(decompose(logSup))
#Ver el grÃƒÂ¡fico de la serie
plot(logAirPassengers)
#Ver el grÃƒÂ¡fico de la serie
plot(logSup)
#Para saber si hay raÃƒ­ces unitarias
adfTest(logSup)
library(forecast)
library(tseries)
library(fUnitRoots)
library(ggfortify)
library(ggplot2)
library(forecast)
library(tseries)
library(fUnitRoots)
library(ggfortify)
#Para saber si hay raÃƒ­ces unitarias
adfTest(logSup)
adfTest(diff(logSup))
#GrÃƒÂ¡fico de autocorrelaciÃƒÂ³n
acf(logSup)
# funciones de autocorrelaciÃƒÂ³n y autocorrelaciÃƒÂ³n parcial
acf(diff(logSup),12)
pacf(diff(logSup))
auto.arima(superior)
auto.arima(AirPassengers)
fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
auto.arima(AirPassengers)
fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
fit <- arima(log(superior), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(superior,2.718^pred$pred, log = "y", lty = c(1,3))
fit2 <- arima(log(superior), c(2, 1, 1),seasonal = list(order = c(0, 1, 0), period = 12))
forecastAP <- forecast(fit2, level = c(95), h = 120)
autoplot(forecastAP)
##Serie de tiempo para gasolina superior
superior <- ts(data$GasSuperior, start=c(2001, 1), end=c(2019, 6), frequency=12)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(superior)
end(superior)
#Saber la frecuencia de la serie
frequency(superior)
##Serie de tiempo para gasolina superior
superior <- ts(data$GasSuperior, start=c(2001, 1), end=c(2019, 6), frequency=12)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(superior)
end(superior)
#Saber la frecuencia de la serie
frequency(superior)
plot(superior)
abline(reg=lm(superior~time(superior)), col=c("red"))
plot(aggregate(superior,FUN=mean))
dec.Sup<-decompose(superior)
plot(dec.Sup)
##------------------------------------------------------------------
#Uniendo diesel y diesel ls
data$newdiesel <- paste(data$Diesel,data$DieselLS)
data
data <- read.csv(file="datosimp.csv", header=TRUE)
View(data)
class(data)
##Serie de tiempo para gasolina superior
superior <- ts(data$GasSuperior, start=c(2001, 1), end=c(2019, 6), frequency=12)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(superior)
end(superior)
#Saber la frecuencia de la serie
frequency(superior)
plot(superior)
abline(reg=lm(superior~time(superior)), col=c("red"))
plot(aggregate(superior,FUN=mean))
dec.Sup<-decompose(superior)
plot(dec.Sup)
plot(dec.Sup$seasonal)
#Aplicaremos una transformaciÃƒÂ³n logarÃƒ­tmica
logSup <- log(superior)
plot(decompose(logSup))
#Ver el grÃƒÂ¡fico de la serie
plot(logSup)
#Para saber si hay raÃƒ­ces unitarias
adfTest(logSup)
adfTest(diff(logSup))
#GrÃƒÂ¡fico de autocorrelaciÃƒÂ³n
acf(logSup)
# funciones de autocorrelaciÃƒÂ³n y autocorrelaciÃƒÂ³n parcial
acf(diff(logSup),12)
pacf(diff(logSup))
auto.arima(superior)
fit <- arima(log(superior), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(superior,2.718^pred$pred, log = "y", lty = c(1,3))
fit2 <- arima(log(superior), c(2, 1, 1),seasonal = list(order = c(0, 1, 0), period = 12))
forecastAP <- forecast(fit2, level = c(95), h = 120)
autoplot(forecastAP)
data %>% mutate(newDiesel = coalesce(Diesel,DieselLS)) %>%
select(a, newDiesel)
##------------------------------------------------------------------
#Uniendo diesel y diesel ls
library(dplyr)
data %>% mutate(newDiesel = coalesce(Diesel,DieselLS)) %>%
select(a, newDiesel)
data %>% mutate(newDiesel = coalesce(Diesel,DieselLS)) %>%
select(Anio, newDiesel)
data %>% mutate(newDiesel = coalesce(Diesel,DieselLS)) %>%
select( newDiesel)
data$newDiesel<- data %>% mutate(newDiesel = coalesce(Diesel,DieselLS)) %>%
select( newDiesel)
data %>% mutate(newDiesel = coalesce(Diesel,DieselLS))
data %>% mutate(newDiesel = coalesce(Diesel,DieselLS)) %>%
select( newDiesel)
data$newDiesel
##Serie de tiempo para gasolina diesel
diesel <- ts(data$newDiesel, start=c(2001, 1), end=c(2019, 6), frequency=12)
plot(diesel)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(diesel)
end(diesel)
#Saber la frecuencia de la serie
frequency(diesel)
plot(diesel)
abline(reg=lm(diesel~time(diesel)), col=c("red"))
plot(aggregate(diesel,FUN=mean))
dec.Dis<-decompose(diesel)
plot(dec.Dis)
plot(dec.Dis$diesel)
plot(aggregate(diesel,FUN=mean))
dec.Dis<-decompose(diesel)
dec.Dis
plot(dec.Dis)
plot(dec.Dis$seasonal)
#Aplicaremos una transformaciÃƒÂ³n logarÃƒ­tmica
logdis <- log(diesel)
plot(decompose(logdis))
#Ver el grÃƒÂ¡fico de la serie
plot(logdis)
#Para saber si hay raÃƒ­ces unitarias
adfTest(logdis)
adfTest(diff(logdis))
#GrÃƒÂ¡fico de autocorrelaciÃƒÂ³n
acf(logdis)
# funciones de autocorrelaciÃƒÂ³n y autocorrelaciÃƒÂ³n parcial
acf(diff(logdis),12)
pacf(diff(logdis))
auto.arima(diesel)
fit <- arima(log(diesel), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(superior,2.718^pred$pred, log = "y", lty = c(1,3))
fit2 <- arima(log(diesel), c(2, 1, 1),seasonal = list(order = c(0, 1, 0), period = 12))
forecastAP <- forecast(fit2, level = c(95), h = 120)
autoplot(forecastAP)
data$newDiesel<- data %>% mutate(newDiesel = coalesce(Diesel,DieselLS)) %>%
select( newDiesel)
##Serie de tiempo para gasolina diesel
diesel <- ts(data$newDiesel, start=c(2001, 1), end=c(2019, 6), frequency=12)
plot(diesel)
plot(diesel)
abline(reg=lm(diesel~time(diesel)), col=c("red"))
plot(aggregate(diesel,FUN=mean))
dec.Dis<-decompose(diesel)
plot(dec.Dis)
plot(dec.Dis$seasonal)
plot(dec.Dis)
#Uniendo diesel y diesel ls
library(dplyr)
data$newDiesel<- data %>% mutate(newDiesel = coalesce(Diesel,DieselLS)) %>%
select( newDiesel)
##Serie de tiempo para gasolina diesel
diesel <- ts(data$newDiesel, start=c(2001, 1), end=c(2019, 6), frequency=12)
plot(diesel)
##analisis gasolina superior
#Saber cuando empieza la serie y cuando termina
start(diesel)
end(diesel)
#Saber la frecuencia de la serie
frequency(diesel)
plot(diesel)
abline(reg=lm(diesel~time(diesel)), col=c("red"))
plot(aggregate(diesel,FUN=mean))
dec.Dis<-decompose(diesel)
plot(dec.Dis)
plot(dec.Dis$seasonal)
##no presenta estacionalidadÂ¿? varia practicamente igual siempre.
##si presenta tendencia, va en aumento la importacion
#Aplicaremos una transformaciÃƒÂ³n logarÃƒ­tmica
logdis <- log(diesel)
plot(decompose(logdis))
#Ver el grÃƒÂ¡fico de la serie
plot(logdis)
#Para saber si hay raÃƒ­ces unitarias
adfTest(logdis)
adfTest(diff(logdis))
#GrÃƒÂ¡fico de autocorrelaciÃƒÂ³n
acf(logdis)
# funciones de autocorrelaciÃƒÂ³n y autocorrelaciÃƒÂ³n parcial
acf(diff(logdis),12)
pacf(diff(logdis))
# Hacer el modelo
auto.arima(diesel)
fit <- arima(log(diesel), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(superior,2.718^pred$pred, log = "y", lty = c(1,3))
fit2 <- arima(log(diesel), c(2, 1, 1),seasonal = list(order = c(0, 1, 0), period = 12))
forecastAP <- forecast(fit2, level = c(95), h = 120)
autoplot(forecastAP)
summary(data)
barplot(table(data$Anio),main = "Cantidad segun aÃ±o")
barplot(table(data$Mes),main = "Cantidad segun mes")
qplot(data$GasAviacion, geom="histogram",main = "Histograma de glp")
qqnorm(data$GasAviacion, main = "GLP", col = 2)
qqline(data$GasAviacion, col = 3)
qplot(data$GasSuperior, geom="histogram",main = "Histograma de glp")
qqnorm(data$GasSuperior, main = "GLP", col = 2)
qqline(data$GasSuperior, col = 3)
qplot(data$GasRegular, geom="histogram",main = "Histograma de glp")
qqnorm(data$GasRegular, main = "GLP", col = 2)
qqline(data$GasRegular, col = 3)
qplot(data$Kerosina, geom="histogram",main = "Histograma de glp")
qqnorm(data$Kerosina, main = "GLP", col = 2)
qqline(data$Kerosina, col = 3)
qplot(data$rTurboJet, geom="histogram",main = "Histograma de glp")
qqnorm(data$rTurboJet, main = "GLP", col = 2)
qqline(data$rTurboJet, col = 3)
qplot(data$Diesel, geom="histogram",main = "Histograma de glp")
qqnorm(data$Diesel, main = "GLP", col = 2)
qqline(data$Diesel, col = 3)
qplot(data$DieselLSl, geom="histogram",main = "Histograma de glp")
qqnorm(data$DieselLS, main = "GLP", col = 2)
qqline(data$DieselLS, col = 3)
qplot(data$DieselULS, geom="histogram",main = "Histograma de glp")
qqnorm(data$DieselULSl, main = "GLP", col = 2)
qqline(data$DieselULSl, col = 3)
qplot(data$Bunker, geom="histogram",main = "Histograma de glp")
qqnorm(data$Bunker, main = "GLP", col = 2)
qqline(data$Bunker, col = 3)
qplot(data$Asfalto, geom="histogram",main = "Histograma de glp")
qqnorm(data$Asfalto, main = "GLP", col = 2)
qqline(data$Asfalto, col = 3)
qplot(data$PetCoke, geom="histogram",main = "Histograma de glp")
qqnorm(data$PetCoke, main = "GLP", col = 2)
qqline(data$PetCoke, col = 3)
qplot(data$AceitesLub, geom="histogram",main = "Histograma de glp")
qqnorm(data$AceitesLub, main = "GLP", col = 2)
qqline(data$AceitesLub,col = 3)
qplot(data$gGrasasLub, geom="histogram",main = "Histograma de glp")
qqnorm(data$GrasasLub, main = "GLP", col = 2)
qqline(data$GrasasLub, col = 3)
qplot(data$Solventes, geom="histogram",main = "Histograma de glp")
qqnorm(data$Solventes, main = "GLP", col = 2)
qqline(data$Solventes, col = 3)
qplot(data$Naftas, geom="histogram",main = "Histograma de glp")
qqnorm(data$Naftas, main = "GLP", col = 2)
qqline(data$Naftas, col = 3)
qplot(data$Ceras, geom="histogram",main = "Histograma de glp")
qqnorm(data$Ceras, main = "GLP", col = 2)
qqline(data$Ceras, col = 3)
qplot(data$Butano, geom="histogram",main = "Histograma de glp")
qqnorm(data$Butano, main = "GLP", col = 2)
qqline(data$Butano, col = 3)
qplot(data$PetroleoReconst, geom="histogram",main = "Histograma de glp")
qqnorm(data$PetroleoReconst, main = "GLP", col = 2)
qqline(data$PetroleoReconst, col = 3)
qplot(data$MTBE, geom="histogram",main = "Histograma de glp")
qqnorm(data$MTBE, main = "GLP", col = 2)
qqline(data$MTBE, col = 3)
qplot(data$Orimulsion, geom="histogram",main = "Histograma de glp")
qqnorm(data$Orimulsion, main = "GLP", col = 2)
qqline(data$Orimulsion, col = 3)
qplot(data$MezclasOleosas, geom="histogram",main = "Histograma de glp")
qqnorm(data$MezclasOleosas, main = "GLP", col = 2)
qqline(data$MezclasOleosas, col = 3)
qplot(data$Total, geom="histogram",main = "Histograma de glp")
qqnorm(data$Total, main = "GLP", col = 2)
qqline(data$Total, col = 3)
barplot(table(data$Anio),main = "Cantidad segun aÃ±o")
barplot(table(data$Mes),main = "Cantidad segun mes")
qplot(data$GasAviacion, geom="histogram",main = "Histograma de glp")
qqnorm(data$GasAviacion, main = "GLP", col = 2)
qqline(data$GasAviacion, col = 3)
qplot(data$GasSuperior, geom="histogram",main = "Histograma de glp")
qqnorm(data$GasSuperior, main = "GLP", col = 2)
qqline(data$GasSuperior, col = 3)
qplot(data$GasRegular, geom="histogram",main = "Histograma de glp")
qqnorm(data$GasRegular, main = "GLP", col = 2)
qqline(data$GasRegular, col = 3)
qplot(data$Kerosina, geom="histogram",main = "Histograma de glp")
qqnorm(data$Kerosina, main = "GLP", col = 2)
qqline(data$Kerosina, col = 3)
qplot(data$rTurboJet, geom="histogram",main = "Histograma de glp")
qqnorm(data$rTurboJet, main = "GLP", col = 2)
qqline(data$rTurboJet, col = 3)
qplot(data$Diesel, geom="histogram",main = "Histograma de glp")
qqnorm(data$Diesel, main = "GLP", col = 2)
qqline(data$Diesel, col = 3)
qplot(data$DieselLSl, geom="histogram",main = "Histograma de glp")
qplot(data$Diesel, geom="histogram",main = "Histograma de glp")
